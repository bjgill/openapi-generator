stages:
  - build
  - test
  - release

variables:
  TMP_BRANCH_IMAGE_NAME: $DOCKER_TEMP_REGISTRY/$CI_PROJECT_PATH/$CI_BUILD_REF_SLUG:$CI_PIPELINE_ID
  ART_BRANCH_IMAGE_NAME: $DOCKER_RELEASE_REGISTRY/$CI_PROJECT_PATH/$CI_BUILD_REF_SLUG:$CI_JOB_ID
  ART_BASE_IMAGE_NAME: $DOCKER_RELEASE_REGISTRY/$CI_PROJECT_PATH/$CI_BUILD_REF_SLUG
  ART_TAG_BASE_IMAGE_NAME: $DOCKER_RELEASE_REGISTRY/$CI_PROJECT_PATH/CI_BUILD_REF_SLUG:$CI_COMMIT_TAG
  RUST_IMAGE: $DOCKER_RELEASE_REGISTRY/images.core/rust-dev/centos:5.2.1
  DOCKER_DRIVER: overlay

.docker_template: &docker
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $ARTIFACTORY_TOKEN $DOCKER_TEMP_REGISTRY
    - docker login -u gitlab-ci-token -p $ARTIFACTORY_TOKEN $DOCKER_RELEASE_REGISTRY

.rust_template: &rust
  image: $RUST_IMAGE
  before_script:
    # Add the SSH key stored in CI variable to the agent store,
    # to enable read-only SSH access to other GitLab repos.
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$GIT_CI_PULL_KEY")

build:
  # Builds Docker container.  The Dockerfile builds the source code into a jar file.
  stage: build
  <<: *docker
  script:
    - apk add --no-cache bash
    - bash run-in-docker-headless.sh mvn package
    # Check that the sample is up to date
    - bash run-in-docker-headless.sh ./bin/rust-server-petstore.sh
    - bash run-in-docker-headless.sh git checkout -- 'samples/server/petstore/rust-server/output/*/api/openapi.yaml'
    - bash run-in-docker-headless.sh git diff --exit-code
    - docker build --pull -t $TMP_BRANCH_IMAGE_NAME ./modules/openapi-generator-cli
    - docker push $TMP_BRANCH_IMAGE_NAME

sample_tests:
  # Test building the generated Rust code
  stage: test
  <<: *rust
  script:
    - cd samples/server/petstore/rust-server
    - cargo build
    - cargo build --example client
    - cargo build --example server
    - cargo test
    - cargo doc
  cache:
    # Cache the downloaded dependencies
    paths:
      - .cargo/

release:
  stage: release
  <<: *docker
  script:
    - docker pull $TMP_BRANCH_IMAGE_NAME
    - docker tag $TMP_BRANCH_IMAGE_NAME $ART_BRANCH_IMAGE_NAME
    - docker push $ART_BRANCH_IMAGE_NAME
    - docker tag $TMP_BRANCH_IMAGE_NAME $ART_BASE_IMAGE_NAME
    - docker push $ART_BASE_IMAGE_NAME
  only:
    - rust-openapi

release_tag:
  stage: release
  <<: *docker
  only:
    - tags
  script:
    - docker pull $TMP_BRANCH_IMAGE_NAME
    - docker tag $TMP_BRANCH_IMAGE_NAME $ART_TAG_BASE_IMAGE_NAME
    - docker push $ART_TAG_BASE_IMAGE_NAME
